/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package t;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-14")
public class W implements org.apache.thrift.TBase<W, W._Fields>, java.io.Serializable, Cloneable, Comparable<W> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("W");

  private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField T_FIELD_DESC = new org.apache.thrift.protocol.TField("t", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WTupleSchemeFactory());
  }

  public String a; // required
  public long c; // optional
  public double v; // optional
  public long t; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    A((short)1, "a"),
    C((short)2, "c"),
    V((short)3, "v"),
    T((short)4, "t");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // A
          return A;
        case 2: // C
          return C;
        case 3: // V
          return V;
        case 4: // T
          return T;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __C_ISSET_ID = 0;
  private static final int __V_ISSET_ID = 1;
  private static final int __T_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.C,_Fields.V};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.T, new org.apache.thrift.meta_data.FieldMetaData("t", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(W.class, metaDataMap);
  }

  public W() {
  }

  public W(
    String a,
    long t)
  {
    this();
    this.a = a;
    this.t = t;
    setTIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public W(W other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetA()) {
      this.a = other.a;
    }
    this.c = other.c;
    this.v = other.v;
    this.t = other.t;
  }

  public W deepCopy() {
    return new W(this);
  }

  @Override
  public void clear() {
    this.a = null;
    setCIsSet(false);
    this.c = 0;
    setVIsSet(false);
    this.v = 0.0;
    setTIsSet(false);
    this.t = 0;
  }

  public String getA() {
    return this.a;
  }

  public W setA(String a) {
    this.a = a;
    return this;
  }

  public void unsetA() {
    this.a = null;
  }

  /** Returns true if field a is set (has been assigned a value) and false otherwise */
  public boolean isSetA() {
    return this.a != null;
  }

  public void setAIsSet(boolean value) {
    if (!value) {
      this.a = null;
    }
  }

  public long getC() {
    return this.c;
  }

  public W setC(long c) {
    this.c = c;
    setCIsSet(true);
    return this;
  }

  public void unsetC() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __C_ISSET_ID);
  }

  /** Returns true if field c is set (has been assigned a value) and false otherwise */
  public boolean isSetC() {
    return EncodingUtils.testBit(__isset_bitfield, __C_ISSET_ID);
  }

  public void setCIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __C_ISSET_ID, value);
  }

  public double getV() {
    return this.v;
  }

  public W setV(double v) {
    this.v = v;
    setVIsSet(true);
    return this;
  }

  public void unsetV() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __V_ISSET_ID);
  }

  /** Returns true if field v is set (has been assigned a value) and false otherwise */
  public boolean isSetV() {
    return EncodingUtils.testBit(__isset_bitfield, __V_ISSET_ID);
  }

  public void setVIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __V_ISSET_ID, value);
  }

  public long getT() {
    return this.t;
  }

  public W setT(long t) {
    this.t = t;
    setTIsSet(true);
    return this;
  }

  public void unsetT() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __T_ISSET_ID);
  }

  /** Returns true if field t is set (has been assigned a value) and false otherwise */
  public boolean isSetT() {
    return EncodingUtils.testBit(__isset_bitfield, __T_ISSET_ID);
  }

  public void setTIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __T_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case A:
      if (value == null) {
        unsetA();
      } else {
        setA((String)value);
      }
      break;

    case C:
      if (value == null) {
        unsetC();
      } else {
        setC((Long)value);
      }
      break;

    case V:
      if (value == null) {
        unsetV();
      } else {
        setV((Double)value);
      }
      break;

    case T:
      if (value == null) {
        unsetT();
      } else {
        setT((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case A:
      return getA();

    case C:
      return Long.valueOf(getC());

    case V:
      return Double.valueOf(getV());

    case T:
      return Long.valueOf(getT());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case A:
      return isSetA();
    case C:
      return isSetC();
    case V:
      return isSetV();
    case T:
      return isSetT();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof W)
      return this.equals((W)that);
    return false;
  }

  public boolean equals(W that) {
    if (that == null)
      return false;

    boolean this_present_a = true && this.isSetA();
    boolean that_present_a = true && that.isSetA();
    if (this_present_a || that_present_a) {
      if (!(this_present_a && that_present_a))
        return false;
      if (!this.a.equals(that.a))
        return false;
    }

    boolean this_present_c = true && this.isSetC();
    boolean that_present_c = true && that.isSetC();
    if (this_present_c || that_present_c) {
      if (!(this_present_c && that_present_c))
        return false;
      if (this.c != that.c)
        return false;
    }

    boolean this_present_v = true && this.isSetV();
    boolean that_present_v = true && that.isSetV();
    if (this_present_v || that_present_v) {
      if (!(this_present_v && that_present_v))
        return false;
      if (this.v != that.v)
        return false;
    }

    boolean this_present_t = true;
    boolean that_present_t = true;
    if (this_present_t || that_present_t) {
      if (!(this_present_t && that_present_t))
        return false;
      if (this.t != that.t)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_a = true && (isSetA());
    list.add(present_a);
    if (present_a)
      list.add(a);

    boolean present_c = true && (isSetC());
    list.add(present_c);
    if (present_c)
      list.add(c);

    boolean present_v = true && (isSetV());
    list.add(present_v);
    if (present_v)
      list.add(v);

    boolean present_t = true;
    list.add(present_t);
    if (present_t)
      list.add(t);

    return list.hashCode();
  }

  @Override
  public int compareTo(W other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetV()).compareTo(other.isSetV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetT()).compareTo(other.isSetT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t, other.t);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("W(");
    boolean first = true;

    sb.append("a:");
    if (this.a == null) {
      sb.append("null");
    } else {
      sb.append(this.a);
    }
    first = false;
    if (isSetC()) {
      if (!first) sb.append(", ");
      sb.append("c:");
      sb.append(this.c);
      first = false;
    }
    if (isSetV()) {
      if (!first) sb.append(", ");
      sb.append("v:");
      sb.append(this.v);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("t:");
    sb.append(this.t);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WStandardSchemeFactory implements SchemeFactory {
    public WStandardScheme getScheme() {
      return new WStandardScheme();
    }
  }

  private static class WStandardScheme extends StandardScheme<W> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, W struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // A
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.a = iprot.readString();
              struct.setAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // C
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.c = iprot.readI64();
              struct.setCIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // V
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.v = iprot.readDouble();
              struct.setVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // T
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.t = iprot.readI64();
              struct.setTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, W struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.a != null) {
        oprot.writeFieldBegin(A_FIELD_DESC);
        oprot.writeString(struct.a);
        oprot.writeFieldEnd();
      }
      if (struct.isSetC()) {
        oprot.writeFieldBegin(C_FIELD_DESC);
        oprot.writeI64(struct.c);
        oprot.writeFieldEnd();
      }
      if (struct.isSetV()) {
        oprot.writeFieldBegin(V_FIELD_DESC);
        oprot.writeDouble(struct.v);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(T_FIELD_DESC);
      oprot.writeI64(struct.t);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WTupleSchemeFactory implements SchemeFactory {
    public WTupleScheme getScheme() {
      return new WTupleScheme();
    }
  }

  private static class WTupleScheme extends TupleScheme<W> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, W struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetA()) {
        optionals.set(0);
      }
      if (struct.isSetC()) {
        optionals.set(1);
      }
      if (struct.isSetV()) {
        optionals.set(2);
      }
      if (struct.isSetT()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetA()) {
        oprot.writeString(struct.a);
      }
      if (struct.isSetC()) {
        oprot.writeI64(struct.c);
      }
      if (struct.isSetV()) {
        oprot.writeDouble(struct.v);
      }
      if (struct.isSetT()) {
        oprot.writeI64(struct.t);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, W struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.a = iprot.readString();
        struct.setAIsSet(true);
      }
      if (incoming.get(1)) {
        struct.c = iprot.readI64();
        struct.setCIsSet(true);
      }
      if (incoming.get(2)) {
        struct.v = iprot.readDouble();
        struct.setVIsSet(true);
      }
      if (incoming.get(3)) {
        struct.t = iprot.readI64();
        struct.setTIsSet(true);
      }
    }
  }

}

